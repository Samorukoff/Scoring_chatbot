import logging
from datetime import datetime
import joblib

import pandas as pd

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton

from core.handlers.states import Form
from core.handlers.score_test import validate_and_store

import httpx
from lxml import etree

router = Router()
logging.basicConfig(level=logging.INFO)

# –í—ã–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–∞ –¥–æ–ª–ª–∞—Ä–∞
async def get_usd_rate_cbr() -> float:
    url = "https://www.cbr.ru/scripts/XML_daily.asp"

    async with httpx.AsyncClient() as client:
        response = await client.get(url)

    tree = etree.fromstring(response.content)

    for valute in tree.findall("Valute"):
        char_code = valute.find("CharCode").text
        if char_code == "USD":
            value_str = valute.find("Value").text.replace(',', '.')
            return float(value_str)
    
    raise RuntimeError("–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@router.message(Form.monthly_balance)
async def result(message: Message, state: FSMContext):
    if await validate_and_store(message, state, "monthly_balance", float, 0):
        await state.set_state(Form.result)

        # –î–æ—Å—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()

        # –ë–∞–∑–æ–≤—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        usd_rate = await get_usd_rate_cbr()

        input_data = {
            'Age': int(data['age']),
            'Annual_Income': round(float(data['annual_income']) / usd_rate, 2),
            'Monthly_Inhand_Salary': round(float(data['monthly_salary']) / usd_rate, 2),
            'Num_Bank_Accounts': int(data['bank_accounts']),
            'Num_Credit_Card': int(data['credit_cards']),
            'Interest_Rate': round(float(data['interest_rate']), 2),
            'Delay_from_due_date': int(data['delay_from_due_date']),
            'Num_of_Delayed_Payment': int(data['delayed_payments']),
            'Changed_Credit_Limit': round(float(data['changed_credit_limit']) / usd_rate, 2),
            'Num_Credit_Inquiries': int(data['credit_inquiries']),
            'Outstanding_Debt': round(float(data['outstanding_debt']) / usd_rate, 2),
            'Credit_Utilization_Ratio': round(float(data['credit_util_ratio']), 2),
            'Credit_History_Age': int(data['credit_history_age']),
            'Total_EMI_per_month': round(float(data['total_emi']) / usd_rate, 2),
            'Amount_invested_monthly': round(float(data['monthly_investment']) / usd_rate, 2),
            'Monthly_Balance': round(float(data['monthly_balance']) / usd_rate, 2),
        }

        # --------- –î–æ–±–∞–≤–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ ---------
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–Ω–∞—á–µ–Ω–∏–µ–º False
        one_hot_columns = [
            # –ú–µ—Å—è—Ü—ã
            'Month_January', 'Month_February', 'Month_March', 'Month_May', 'Month_June', 'Month_July', 'Month_August',

            # Occupation
            'Occupation_Architect', 'Occupation_Developer', 'Occupation_Doctor', 'Occupation_Engineer',
            'Occupation_Entrepreneur', 'Occupation_Journalist', 'Occupation_Lawyer', 'Occupation_Manager',
            'Occupation_Mechanic', 'Occupation_Media_Manager', 'Occupation_Musician', 'Occupation_Scientist',
            'Occupation_Teacher', 'Occupation_Writer', 'Occupation________',

            # Payment_of_Min_Amount
            'Payment_of_Min_Amount_No', 'Payment_of_Min_Amount_Yes',

            # Payment_Behaviour
            'Payment_Behaviour_High_spent_Large_value_payments',
            'Payment_Behaviour_High_spent_Medium_value_payments',
            'Payment_Behaviour_High_spent_Small_value_payments',
            'Payment_Behaviour_Low_spent_Large_value_payments',
            'Payment_Behaviour_Low_spent_Medium_value_payments',
            'Payment_Behaviour_Low_spent_Small_value_payments'
        ]

        for col in one_hot_columns:
            input_data[col] = False

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        month = datetime.now().strftime('%B')  # May, June –∏ —Ç.–ø.
        month_col = f'Month_{month}'
        if month_col in one_hot_columns:
            input_data[month_col] = True

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ occupation
        occ_col = data.get('occupation')
        if occ_col in one_hot_columns:
            input_data[occ_col] = True

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ payment behaviour
        pay_col = data.get('payment_behaviour')
        if pay_col in one_hot_columns:
            input_data[pay_col] = True

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Payment_of_Min_Amount
        if data.get('payment_of_min_amount') is True:
            input_data['Payment_of_Min_Amount_Yes'] = True
        elif data.get('payment_of_min_amount') is False:
            input_data['Payment_of_Min_Amount_No'] = True

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        X_input = pd.DataFrame([input_data])

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        feature_order = joblib.load("core/model/_feature_order.pkl")
        X_input = X_input[feature_order]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
        model = joblib.load("core/model/_stacking_model.pkl")
        labels = {0: "–ù–∏–∑–∫–∏–π", 1: "–°—Ä–µ–¥–Ω–∏–π", 2: "–í—ã—Å–æ–∫–∏–π"}
        prediction_index = int(model.predict(X_input)[0])
        prediction = labels.get(prediction_index, "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∏—Å–ª–æ–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –∏—Å—Ö–æ–¥—è –∏–∑ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        probs = model.predict_proba(X_input)
        probs = probs[0]
        logging.info(f'–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏: {probs}')
        rate = int((probs[0] * 0 + probs[1] * 0.5 + probs[2] * 1) * 999)

        # –í—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–æ–≤
        lines = ["üìã *–í–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:*"]
        row = X_input.iloc[0]

        for col, val in row.items():
            if val in [False, 0, 0.0, None] or pd.isna(val):
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º "–ø—É—Å—Ç—ã–µ" –∑–Ω–∞—á–µ–Ω–∏—è
            if val is True:
                display_val = "‚úÖ"
            else:
                display_val = f"`{val}`"
            lines.append(f"‚Ä¢ *{col}*: {display_val}")

        answer_text = "\n".join(lines)

        await message.answer(
            f'–í–∞—à –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: *{prediction}*\n\n*{rate} –±–∞–ª–ª–æ–≤*\n\n{answer_text}',
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data="go_to_start")]])
        )

# –ù–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω
@router.callback_query(F.data == 'go_to_start')
async def start(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.clear()
    await call.message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–ë–ò-–ë–∞–Ω–∫!\n\n'
    '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –Ω–µ–±–æ–ª—å—à–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.'
    '–ü–æ –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –º—ã —Å–º–æ–∂–µ–º –æ—Ü–µ–Ω–∏—Ç—å –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∫—Ä–µ–¥–∏—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è\n\n'
    '–ï—Å–ª–∏ –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–¢–ê–†–¢"', reply_markup = InlineKeyboardMarkup(inline_keyboard=
                                     [[InlineKeyboardButton(text='‚ñ∂Ô∏è –°–¢–ê–†–¢', callback_data='start_test')]]))